"""
Main fitness agent implementation.
"""
from typing import Optional
from agents import Agent
from dotenv import load_dotenv

from .models import FitnessPlan, AgentConfig
from .providers import ModelProvider
from .fitness_plan_agent import FitnessPlanAgent
from .tools import get_tool_functions, get_combined_instructions

load_dotenv()


class FitnessAgent(Agent):
    """
    A helpful assistant for general fitness guidance and handoffs to a plan-building agent.
    """
    
    # Class variable to store the most recent fitness plan
    latest_fitness_plan: Optional[FitnessPlan] = None

    def __init__(self, model_name: Optional[str] = None, config: Optional[AgentConfig] = None):
        """
        Initialize the Fitness Agent with configurable AI model (Anthropic or OpenAI).
        
        Args:
            model_name: Name of the AI model to use. Can be a key from SUPPORTED_MODELS
                       or a full model identifier. Defaults to llama-3.3-70b-versatile if not specified.
                       Can also be set via AI_MODEL, ANTHROPIC_MODEL, or OPENAI_MODEL environment variables.
            config: Optional AgentConfig for additional configuration
        """
        # Resolve model name
        resolved_model_name = ModelProvider.resolve_model_name(model_name)
        final_model = ModelProvider.get_final_model_identifier(resolved_model_name)

        # Store the model information for debugging
        self.model_name = resolved_model_name
        self.full_model_name = ModelProvider.SUPPORTED_MODELS.get(resolved_model_name, resolved_model_name)
        self.final_model = final_model
        self.provider = ModelProvider.get_provider(resolved_model_name, self.full_model_name)
        self.config = config

        # Create fitness plan agent with model-specific configuration
        fitness_plan_agent = FitnessPlanAgent.create_for_model(final_model, config)

        # Get tools and instructions dynamically
        tools = get_tool_functions()
        tool_instructions = get_combined_instructions()

        # Initialize parent Agent
        super().__init__(
            name="Fitness Assistant",
            model=final_model,
            instructions=f"""
            You are a professional fitness and nutrition assistant with expertise in working with users to create a personalized fitness plan.

            {tool_instructions}
            """,
            tools=tools
        )

    @classmethod
    def list_supported_models(cls) -> dict:
        """Return a dictionary of supported model names and their full identifiers."""
        return ModelProvider.SUPPORTED_MODELS.copy()

    @classmethod
    def get_model_info(cls, model_name: str) -> str:
        """Get information about a specific model."""
        return ModelProvider.get_model_info(model_name)

    @classmethod
    def get_recommended_models(cls) -> list:
        """Get a list of recommended models that are most likely to be available."""
        return ModelProvider.get_recommended_models()

    @classmethod 
    def get_models_by_provider(cls) -> dict:
        """Get models organized by provider."""
        return ModelProvider.get_models_by_provider()

    @classmethod
    def get_models_table_data(cls) -> list:
        """Get model data formatted for table display."""
        return ModelProvider.get_models_table_data()

    @classmethod
    def validate_model_name(cls, model_name: str) -> tuple[bool, str]:
        """
        Validate if a model name is in our supported list and provide helpful feedback.
        
        Returns:
            tuple: (is_valid, message)
        """
        return ModelProvider.validate_model_name(model_name)

    @classmethod
    def set_latest_fitness_plan(cls, fitness_plan: FitnessPlan) -> None:
        """
        Set the latest fitness plan generated by the agent.
        
        Args:
            fitness_plan: The FitnessPlan object to store
        """
        cls.latest_fitness_plan = fitness_plan

    @classmethod
    def get_latest_fitness_plan(cls) -> Optional[FitnessPlan]:
        """
        Get the latest fitness plan generated by the agent.
        
        Returns:
            The latest FitnessPlan object or None if no plan has been generated
        """
        return cls.latest_fitness_plan

    @classmethod
    def clear_latest_fitness_plan(cls) -> None:
        """
        Clear the stored fitness plan.
        """
        cls.latest_fitness_plan = None

    @classmethod
    def has_fitness_plan(cls) -> bool:
        """
        Check if a fitness plan is currently stored.
        
        Returns:
            True if a fitness plan is stored, False otherwise
        """
        return cls.latest_fitness_plan is not None
