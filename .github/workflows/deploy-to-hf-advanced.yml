name: Deploy to Hugging Face Spaces (Advanced) - PRIMARY

# This is the primary deployment workflow with comprehensive validation and error handling
# The simple workflow is disabled to prevent conflicts

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'DEPLOYMENT.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install huggingface_hub[cli]
        
        # Install dependencies for validation
        if [ -f requirements.txt ]; then 
          echo "Installing from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "No requirements.txt found, installing basic dependencies..."
          pip install gradio python-dotenv
        fi

    - name: Validate app structure
      run: |
        echo "Validating app structure..."
        
        # Check required files
        required_files=("requirements.txt")
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          else
            echo "‚úì Found: $file"
          fi
        done
        
        # Check for either fitness_agent structure OR gradio app structure
        if [ -d "fitness_agent" ] && [ -f "fitness_agent/app.py" ]; then
          echo "‚úì Found: fitness_agent/ directory with app.py"
          echo "‚úì Using fitness_agent structure for deployment"
          
          # Validate Python syntax for fitness_agent
          echo "Checking Python syntax for fitness_agent..."
          python -m py_compile fitness_agent/app.py
          if [ -f "fitness_agent/fitness_agent.py" ]; then
            python -m py_compile fitness_agent/fitness_agent.py
          fi
          
        elif [ -d "apps/gradio-app" ]; then
          echo "‚úì Found: apps/gradio-app/ directory"
          echo "‚úì Using gradio-app structure for deployment"
          echo "‚ÑπÔ∏è fitness_agent structure should already exist for HF deployment"
          
        else
          echo "‚ùå Neither fitness_agent nor apps/gradio-app structure found"
          exit 1
        fi
        
        echo "‚úì All validations passed"

    - name: Test imports
      run: |
        echo "Testing critical imports..."
        python .github/test_imports.py
      continue-on-error: true

    - name: Set up Hugging Face CLI
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
      run: |
        # Login to Hugging Face CLI
        echo $HF_TOKEN | huggingface-cli login --token $HF_TOKEN

    - name: Deploy to Hugging Face Spaces
      env:
        HF_TOKEN: ${{ secrets.HF_TOKEN }}
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
        HF_SPACE_NAME: ${{ secrets.HF_SPACE_NAME }}
        FORCE_DEPLOY: ${{ github.event.inputs.force_deploy }}
      run: |
        set -e  # Exit on any error
        
        echo "üöÄ Starting deployment to Hugging Face Spaces..."
        echo "üìã Using: Advanced Workflow (Primary)"
        echo "Target: https://huggingface.co/spaces/$HF_USERNAME/$HF_SPACE_NAME"
        
        # Configure git
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        
        # Clone the Hugging Face Space repository
        echo "üì• Cloning Hugging Face Space repository..."
        if ! git clone https://user:$HF_TOKEN@huggingface.co/spaces/$HF_USERNAME/$HF_SPACE_NAME hf-space; then
          echo "‚ùå Failed to clone HF Space. Check if the space exists and tokens are correct."
          exit 1
        fi
        
        # Create backup of current HF space content
        cp -r hf-space hf-space-backup
        
        # Prepare files for deployment
        echo "üìã Preparing files for deployment..."
        
        # Copy files with specific inclusions/exclusions
        rsync -av \
          --exclude='.git' \
          --exclude='hf-space*' \
          --exclude='.github' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.env' \
          --exclude='DEPLOYMENT.md' \
          --exclude='GITHUB_ACTIONS_SETUP.md' \
          --exclude='HF_SPACE_SETUP.md' \
          --exclude='SECURITY_UPDATE.md' \
          --exclude='WORKFLOW_STRATEGY.md' \
          --exclude='setup-github-actions.*' \
          --exclude='space_config.yaml' \
          --exclude='.pytest_cache' \
          --exclude='tests/' \
          --exclude='docs/' \
          --exclude='scripts/' \
          --exclude='poetry.lock' \
          --exclude='pyproject.toml' \
          . hf-space/
        
        # Ensure we have the HF-specific README
        if [ -f "README_HF.md" ]; then
          cp README_HF.md hf-space/README.md
        fi
        
        # Ensure critical files are present
        if [ ! -f "hf-space/fitness_agent/app.py" ]; then
          echo "‚ùå fitness_agent/app.py not found in deployment directory"
          exit 1
        fi
        
        if [ ! -f "hf-space/requirements.txt" ]; then
          echo "‚ùå requirements.txt not found in deployment directory"
          exit 1
        fi
        
        # Navigate to HF space directory
        cd hf-space
        
        # Note: API keys should be set directly in Hugging Face Space settings
        echo "‚ÑπÔ∏è Remember to set OPENAI_API_KEY and ANTHROPIC_API_KEY in your HF Space settings"
        
        # Check for changes
        echo "üîç Checking for changes..."
        if git diff --quiet && git diff --staged --quiet && [ "$FORCE_DEPLOY" != "true" ]; then
          echo "‚ÑπÔ∏è No changes detected. Skipping deployment."
          echo "Use workflow_dispatch with force_deploy=true to force deployment."
          exit 0
        fi
        
        # Show what's being deployed
        echo "üìù Changes to be deployed:"
        git status --porcelain || true
        
        # Stage all changes
        git add .
        
        # Create commit message
        COMMIT_SHA="${GITHUB_SHA:0:7}"
        COMMIT_MSG="ü§ñ Auto-deploy from GitHub"
        
        if [ -n "$GITHUB_EVENT_NAME" ]; then
          COMMIT_MSG="$COMMIT_MSG ($GITHUB_EVENT_NAME)"
        fi
        
        if [ -n "$COMMIT_SHA" ]; then
          COMMIT_MSG="$COMMIT_MSG - $COMMIT_SHA"
        fi
        
        # Add timestamp
        COMMIT_MSG="$COMMIT_MSG - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Commit changes
        if git commit -m "$COMMIT_MSG"; then
          echo "‚úÖ Changes committed successfully"
        else
          echo "‚ÑπÔ∏è No changes to commit"
          exit 0
        fi
        
        # Push to Hugging Face with retry logic
        echo "üöÄ Pushing to Hugging Face Spaces..."
        
        MAX_RETRIES=3
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if git push origin main; then
            echo "‚úÖ Successfully pushed to Hugging Face Spaces!"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚ö†Ô∏è Push failed. Retry $RETRY_COUNT/$MAX_RETRIES..."
            
            if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
              echo "Waiting 10 seconds before retry..."
              sleep 10
              
              # Try to pull any remote changes
              git pull origin main --rebase || echo "No remote changes to pull"
            else
              echo "‚ùå Failed to push after $MAX_RETRIES attempts"
              
              # Restore backup if available
              if [ -d "../hf-space-backup" ]; then
                echo "üîÑ Attempting to restore HF space from backup..."
                cd ..
                rm -rf hf-space
                mv hf-space-backup hf-space
                cd hf-space
                git push origin main --force || echo "Backup restore also failed"
              fi
              
              exit 1
            fi
          fi
        done

    - name: Deployment Summary
      if: always()
      env:
        HF_USERNAME: ${{ secrets.HF_USERNAME }}
        HF_SPACE_NAME: ${{ secrets.HF_SPACE_NAME }}
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Repository: $GITHUB_REPOSITORY"
        echo "Commit: $GITHUB_SHA"
        echo "Target Space: https://huggingface.co/spaces/$HF_USERNAME/$HF_SPACE_NAME"
        echo "Deployment Status: ${{ job.status }}"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "Your app should be building at: https://huggingface.co/spaces/$HF_USERNAME/$HF_SPACE_NAME"
          echo "Check the Space logs for build status."
        else
          echo "‚ùå Deployment failed. Check the action logs for details."
        fi

    - name: Cleanup
      if: always()
      run: |
        # Cleanup any temporary directories
        rm -rf hf-space hf-space-backup || true
